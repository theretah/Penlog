@page "{id}"
@using Penlog.ExtensionMethods;
@inject Microsoft.AspNetCore.Identity.UserManager<Entities.AppUser> userManager
@model Penlog.Pages.PostModel
@{
    var lastUpdated = Model.Post.LastUpdated;
    var createdDate = Model.Post.CreatedDate;
    var user = userManager.GetUserAsync(User).Result;
    bool isAuthenticated = User.Identity.IsAuthenticated;
    int profileImageWidthAndHeight = 70;

    var postId = Model.Post.Id;
    var authorId = Model.Post.AuthorId;
    var author = Model.Post.Author;
    string userId = "";
    if (user != null)
    {
        userId = user.Id;
    }
}
<div class="container">
    <div class="row">
        <div class="col-8">
            <div class="card mb-3 border-0" style="max-width: 540px;">
                <div class="row g-0">
                    <div class="col-md-2 text-center">
                        <div class="mt-3">
                            <a asp-page="Users/Profile" asp-route-id="@authorId">
                                @await Component.InvokeAsync("ProfileImage", new { profileUser = author, widthAndHeight = profileImageWidthAndHeight })
                            </a>
                        </div>
                    </div>
                    <div class="col-md-8">
                        <div class="card-body p-1">
                            <a class="text-decoration-none text-dark d-inline-block mt-3" asp-page="Users/Profile" asp-route-id="@authorId">
                                <h6 class="card-title fw-bold">@author.UserName</h6>
                            </a>
                            <p class="card-text " style="font-size:.80rem;">
                                Last updated on @Penlog.Utilities.DateTimeUtilities.Span((lastUpdated == null) ? createdDate : lastUpdated.Value)
                            </p>
                        </div>
                    </div>
                </div>
            </div>
            <h1 class="display-4">@Model.Post.Title</h1>
            @if (Model.PreviewImageDataUrl != null)
            {
                <img class="w-100" src="@Model.PreviewImageDataUrl" alt="Alternate Text" />
            }

            <p class="fs-5 lh-base">
                @Html.Raw(Model.Post.Content)
            </p>
            <hr />
            <p class="fs-5">Categories</p>
            @{
                var postCategories = new string[Model.PostCategories.Count()];
                int i = 0;
                foreach (var postCategory in Model.PostCategories)
                {
                    postCategories[i] = postCategory.Category.Title;
                    <button class="btn btn-secondary fs-6 d-inline">
                        @postCategories[i++]
                    </button>
                }
            }

            <br />
            @if (isAuthenticated && author != user)
            {
                @await Component.InvokeAsync("Like", new { postId = postId, userId = userId })
            }
            else
            {
                <a type="submit" asp-area="Identity" asp-page="/Account/Login" class="btn p-1">
                    <img src="~/icons/heart.svg" />
                </a>
            }
            <p class="d-inline">@Model.Likes.Count()</p>

            <a class="btn p-1 d-inline ms-3">
                <img src="~/icons/chat.svg" alt="Alternate Text" />
            </a>
            <p class="d-inline">@Model.Comments.Count()</p>
            <hr />
            @if (user != null)
            {
                <div class="mt-5 p-4 bg-light">
                    <form method="post" asp-page-handler="Comment" asp-route-postId="@postId">
                        <div class="row g-0">
                            <div class="col-1 text-start">
                                <a asp-page="Users/Profile" asp-route-id="@userId">
                                    @await Component.InvokeAsync("ProfileImage", new
                                    {
                                        profileUser = user,
                                        widthAndHeight = profileImageWidthAndHeight
                                    })
                                </a>
                            </div>
                            <div class="col-10 ms-2">
                                <div class="card-body p-1 mt-3">
                                    <a class="text-decoration-none text-dark d-inline-block" asp-page="Users/Profile" asp-route-id="@userId">
                                        <h6 class="card-title fw-bold">@user.UserName (You)</h6>
                                    </a>
                                </div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <textarea asp-for="CommentText" type="text" class="form-control" id="contentInput" placeholder="Write your opinion"></textarea>
                            <span asp-validation-for="CommentText" class="text-danger"></span>
                        </div>
                        <button type="submit" class="btn btn-primary float-end">Submit</button>
                    </form>
                </div>
                <br />
                <br />
            }
            else
            {
                <h5>You must be signed in to comment.</h5>
            }

            <hr />
            <h3>Comments</h3>
            @{
                var comments = Model.Comments.Where(c => c.ParentId == null).OrderBy(c => c.PublishDate);
                if (comments.Count() == 0)
                {
                    <p>No comments for this post yet.</p>
                }

                int commentNumber = 1;
                foreach (var comment in comments)
                {
                    var replies = Model.Comments.Where(c => c.ParentId == comment.Id)
                        .OrderBy(c => c.PublishDate);
                    @await Component.InvokeAsync("Comment", new
                    {
                        commentId = comment.Id,
                        commentText = Model.CommentText,
                        replies = replies
                    })
                }
            }
        </div>
        <div class="col-4">
            <div class="card mb-3 border-0" style="max-width: 540px;">
                <div class="col-md-2 text-center">
                    <div class="mt-3">
                        <a asp-page="Users/Profile" asp-route-id="@authorId">
                            @await Component.InvokeAsync("ProfileImage", new { profileUser = author, widthAndHeight = profileImageWidthAndHeight })
                        </a>
                    </div>
                </div>
                <div class="col-md-8">
                    <div class="card-body p-1">
                        <a class="text-decoration-none text-dark" asp-page="Users/Profile" asp-route-id="@authorId">
                            <h6 class="card-title fw-bold">@author.UserName</h6>
                        </a>
                        <p class="card-text" style="font-size:.80rem;">
                            @author.FollowersCount Followers
                        </p>
                        @if (author.Biography != null)
                        {
                            <p class="card-text text-secondary" style="font-size:.90rem;">@author.Biography.ShortenString(10)</p>
                        }
                        @if (isAuthenticated && user != author)
                        {
                            @await Component.InvokeAsync("Follow", new { postId = postId, followerId = userId, followingId = authorId });
                        }
                        else if (user != author)
                        {
                            <a asp-area="Identity" asp-page="/Account/Login" class="btn btn-primary">Follow</a>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
